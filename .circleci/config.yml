# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
executors:
  docker-executor:
    docker:
      - image: circleci/python:3.9
orbs:
  #python: circleci/python@2.1.1
  snyk: snyk/snyk@1.5.0
  docker: circleci/docker@1.7.0
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0 # use the AWS ECS orb
  aws-cli: circleci/aws-cli@3.1.1 # use the AWS CLI orb
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  scan python dependencies:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      #- image: cimg/base:stable
      - image: cimg/python:3.7
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run: 
          name: "install python dependencies"
          command: |
               pip install -r requirements.txt
      - snyk/install:
          install-alpine-dependencies: true 
          token-variable: SYNK_TOKEN
      - snyk/scan:
          fail-on-issues: false
          target-file: requirements.txt 
          #project: Team04/tree/circleci-project-setup
          token-variable: SYNK_TOKEN

  docker-build:
    docker:
      # replace with your preferred image
      - image: cimg/base:stable
    steps:
      - setup_remote_docker
      - checkout
      - docker/build:
      #    dockerfile: Dockerfile
          image: python-app 
          tag: latest 
      - run: |
           docker images
      - run:
          name: Install trivy
          command: |
            sudo curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
      - run:
          name: Scan the local image with trivy
          command: sudo trivy image python-app

  push-to-ecr:
     docker:
      # replace with your preferred image
       - image: cimg/base:stable
     steps:
       - setup_remote_docker:
          docker_layer_caching: false
          #version: 20.10.14
       - aws-ecr/build-and-push-image:
          repo: ccteam04
          dockerfile: Dockerfile
          tag: latest

  deploy-application:
    executor: docker-executor
    steps:
      - checkout
      
       # Install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      # Configure kubectl for EKS cluster
      - run:
          name: Configure kubectl
          command: |
            aws eks update-kubeconfig --name ccproject --region $AWS_REGION

      # Install kubectl
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      # Deploy the application using the Docker image
      - run:
          name: Deploy Application
          command: |
            kubectl run my-app \
              --image=097486265619.dkr.ecr.us-east-1.amazonaws.com/ccteam04:latest \
              --port=8080 \
              --labels=app=my-app

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-and-deploy:
    jobs:
      - scan python dependencies       
      - docker-build:
            requires:
              - scan python dependencies
      - push-to-ecr:
              requires:
                - docker-build
      - deploy-application:
              requires:
                - push-to-ecr


      
